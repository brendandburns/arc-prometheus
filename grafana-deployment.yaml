apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "15"
    meta.helm.sh/release-name: grafana
    meta.helm.sh/release-namespace: prometheus
  labels:
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana
    app.kubernetes.io/version: 7.0.3
    helm.sh/chart: grafana-5.3.4
  name: grafana
  namespace: prometheus
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: grafana
      app.kubernetes.io/name: grafana
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: d4d961a94845cf949d4385800d9a76cbd117a5ab2fbeb560bc13dab3fad85c31
        checksum/dashboards-json-config: 1e7e20072d823abf4ac21ddad702954e8d2d9bdb66146a9f6b2241086676029b
        checksum/sc-dashboard-provider-config: 1289e56f31b715aac1b367b56a2c8857114df4992a36c4c40fae22ec5ceffccb
        checksum/secret: 67657d0ac9f53480ad6e5ab0fc3d441c7068d9f13e71ab809fc5d94fd7738157
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: grafana
        app.kubernetes.io/name: grafana
    spec:
      containers:
      - env:
        - name: METHOD
        - name: LABEL
          value: grafana_dashboard
        - name: FOLDER
          value: /tmp/dashboards
        - name: RESOURCE
          value: both
        image: kiwigrid/k8s-sidecar:1.21.0
        imagePullPolicy: IfNotPresent
        name: grafana-sc-dashboard
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /tmp/dashboards
          name: sc-dashboard-volume
      - env:
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              key: admin-user
              name: grafana
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: admin-password
              name: grafana
        - name: GF_INSTALL_PLUGINS
          valueFrom:
            configMapKeyRef:
              key: plugins
              name: grafana
        image: grafana/grafana-oss:9.3.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTPS
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 30
        name: grafana
        ports:
        - containerPort: 443
          name: service
          protocol: TCP
        - containerPort: 3000
          name: grafana
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTPS
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/grafana/grafana.ini
          name: config
          subPath: grafana.ini
        - mountPath: /var/lib/grafana
          name: storage
        - mountPath: /tmp/dashboards
          name: sc-dashboard-volume
        - mountPath: /etc/grafana/provisioning/dashboards/sc-dashboardproviders.yaml
          name: sc-dashboard-provider
          subPath: provider.yaml
        - mountPath: /etc/grafana/provisioning/datasources
          name: sc-datasources-volume
        - mountPath: /certs/
          name: grafana-certs
          readOnly: true
      dnsPolicy: ClusterFirst
      initContainers:
#      - args:
#        - -c
#        - mkdir -p /var/lib/grafana/dashboards/default && /bin/sh /etc/grafana/download_dashboards.sh
#        command:
#        - /bin/sh
#        image: curlimages/curl:7.86.0
#        imagePullPolicy: IfNotPresent
#        name: download-dashboards
#        resources: {}
#        terminationMessagePath: /dev/termination-log
#        terminationMessagePolicy: File
#        volumeMounts:
#        - mountPath: /etc/grafana/download_dashboards.sh
#          name: config
#          subPath: download_dashboards.sh
#        - mountPath: /var/lib/grafana
#          name: storage
#        - mountPath: /certs/
#          name: grafana-certs
#          readOnly: true
      - env:
        - name: METHOD
          value: LIST
        - name: LABEL
          value: grafana_datasource
        - name: FOLDER
          value: /etc/grafana/provisioning/datasources
        - name: RESOURCE
          value: both
        image: kiwigrid/k8s-sidecar:1.21.0
        imagePullPolicy: IfNotPresent
        name: grafana-sc-datasources
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/grafana/provisioning/datasources
          name: sc-datasources-volume
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsUser: 472
      serviceAccount: grafana
      serviceAccountName: grafana
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: grafana
        name: config
      - configMap:
          defaultMode: 420
          name: grafana-dashboards-default
        name: dashboards-default
      - emptyDir: {}
        name: storage
      - emptyDir: {}
        name: sc-dashboard-volume
      - configMap:
          defaultMode: 420
          name: grafana-config-dashboards
        name: sc-dashboard-provider
      - emptyDir: {}
        name: sc-datasources-volume
      - name: grafana-certs
        secret:
          defaultMode: 288
          secretName: grafana-certs
